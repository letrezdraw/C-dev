from heapq import heappush, heappop

graph={
 'A':{'B':6,'F':3},
 'B':{'A':6,'C':3,'D':2},
 'C':{'B':3,'D':1,'E':5},
 'D':{'B':2,'C':1,'E':8,'G':7},
 'E':{'C':5,'D':8,'I':5,'J':5},
 'F':{'A':3,'G':1,'H':7},
 'G':{'F':1,'D':7,'I':3},
 'H':{'F':7,'I':2},
 'I':{'G':3,'H':2,'E':5,'J':3},
 'J':{'E':5,'I':3}
}
h={'A':10,'B':8,'C':5,'D':7,'E':3,'F':6,'G':5,'H':3,'I':1,'J':0}

def astar(s,goal):
    pq=[(h[s],0,s,[s])]
    seen=set()
    while pq:
        f,g,u,path=heappop(pq)
        if u==goal: return path,g
        if u in seen: continue
        seen.add(u)
        for v,c in graph[u].items():
            heappush(pq,(g+c+h[v],g+c,v,path+[v]))

path,cost=astar('A','J')
print("Path:",'->'.join(path)," Cost:",cost)